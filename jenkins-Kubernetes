pipeline {
    agent any

    environment {
        EC2_test_IP = "18.185.15.37"
        EC2_prod_IP = "18.195.117.231"
    }

    stages {
        stage('Clean and Clone git') {
            steps {
                sh 'pwd'
                sh 'rm -rf *'
                sh 'git clone https://github.com/liorfizz/ci-cd.git'
            }
        }

        stage('Build and Cleanup Container') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh "docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}"
                    sh 'echo "apply the script"'
                    sh 'cd ci-cd/alpacaflask && python3 pythonversioning.py'
                }
            }
        }

        stage('Testing Kubernetes') {
            steps {
                script {
                    sh 'gcloud container clusters get-credentials test-cluster --region=europe-central2'
                    sh 'cd ci-cd && kubectl apply -f withredis.yaml'
                    sh 'kubectl rollout restart deploy flask-app-deployment'
                }
            }
        }
        
        stage('Get External IP') {
            steps {
                script {
                    // Run the kubectl command to get the external IP and capture the output into a variable
                    def externalIP = sh(
                        script: '''
                            externalIP=$(kubectl get svc flask-app-service --no-headers | awk '{print $4}')
                            echo $externalIP
                            sleep 30
                        ''',
                        returnStdout: true
                    ).trim()

                    echo "External IP: ${externalIP}"
                }
            }
        }

        stage('Running Kubernetes') {
            steps {
                script {
                    sh 'gcloud container clusters get-credentials flask-cluster --region=europe-central2'
                    sh 'cd ci-cd && kubectl apply -f withredis.yaml'
                    sh 'kubectl rollout restart deploy flask-app-deployment'
                }
            }
        }
    }
}
