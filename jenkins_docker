pipeline {
    agent any

    environment {
        EC2_test_IP = "18.185.15.37"
        EC2_prod_IP = "18.195.117.231"
    }

    stages {
        stage('Clean and Clone git') {
            steps {
                sh 'rm -rf ci-cd'
                sh 'git clone https://github.com/liorfizz/ci-cd.git'
            }
        }
        
        stage('Build and Cleanup Container') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh "docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}"
                    sh 'docker image prune -a'
                    sh 'docker container prune -f'
                    sh 'docker rmi $(docker images -q) || true'
                    sh 'pwd'
                    sh 'cd ci-cd/alpacaflask/ && docker-compose build'
                }
            }
        }
        
        stage('Push to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh "docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}"
                    sh 'docker push liorfizz/alpaca'
                }
            }
        }

        stage('Install Docker') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'ssh-testing', keyFileVariable: 'SSH_PRIVATE_KEY')]) {
                    sshagent(['ssh-testing']) {
                        sh """
                        ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ec2-user@${EC2_prod_IP} '
                            sudo yum install docker -y
                            sudo usermod -a -G docker ec2-user
                            newgrp docker
                            sudo yum install python3-pip -y
                            pip3 install docker-compose
                            sudo systemctl start docker.service
                            sudo systemctl enable docker.service
                            sudo yum install git -y
                        '
                        """
                    }
                }
            }
        }  

         stage('Test Docker') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'ssh-testing', keyFileVariable: 'SSH_PRIVATE_KEY')]) {
                    sshagent(['ssh-testing']) {
                        sh """
                        ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ec2-user@${EC2_prod_IP} '
                            pwd
                            docker-compose down
                            docker image prune -a
                            docker container prune -f
                            docker rmi -f liorfizz/alpaca
                            rm -rf ~/ci-cd/ || true
                            docker pull liorfizz/alpaca
                            git clone https://github.com/liorfizz/ci-cd.git
                            cd ci-cd/alpacaflask/ && cp docker-compose.yml ~
                            docker-compose up -d 
                        '
                        
                        echo "Testing...."
                        curl_output=$(curl -s -o /dev/null -w "%{http_code}" http://${EC2_test_IP}:5000)
                        if [ $curl_output -eq "200" ]; then
                        echo "Site is working (200 OK)"
                        else
                        echo "Error: Site is not working"
                        exit 1
                        fi 
                        """
                    }
                }
            }
        }

        stage('Deploy Docker') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'ssh-testing', keyFileVariable: 'SSH_PRIVATE_KEY')]) {
                    sshagent(['ssh-testing']) {
                        sh """
                        ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ec2-user@${EC2_prod_IP} '
                            pwd
                            docker-compose down
                            docker image prune -a
                            docker container prune -f
                            docker rmi -f liorfizz/alpaca
                            rm -rf ~/ci-cd/ || true
                            docker pull liorfizz/alpaca
                            git clone https://github.com/liorfizz/ci-cd.git
                            cd ci-cd/alpacaflask/ && cp docker-compose.yml ~
                            docker-compose up -d
                        '
                        """
                    }
                }
            }
        }
    }
}
