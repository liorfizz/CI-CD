pipeline {
    agent any

    environment {
        EC2_test_IP = "35.159.23.172"
        EC2_prod_IP = "3.77.54.148"
    }

    stages {
        stage('Clean and Cloning git') {
            steps {
                sh 'rm -rf ci-cd'
                sh 'git clone https://github.com/liorfizz/ci-cd.git'
            }
        }
        stage('Build container plus CLNUP') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh "docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}"
                    sh 'docker image prune -a'
                    sh 'docker container prune -f'
                    sh 'docker rmi $(docker images -q) || true'
                    sh 'pwd'
                    sh 'cd ci-cd/alpacaflask/ && docker-compose build'
                }
            }
        }
        stage('Push to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh "docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}"
                    sh 'docker push liorfizz/alpaca'
                }
            }
        }
        stage('Install Docker') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'ssh-testing', keyFileVariable: 'SSH_PRIVATE_KEY')]) {
                    sshagent(['ssh-testing']) {
                        sh '''
                        ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ec2-user@${EC2_prod_IP} 'echo hello'
                        ssh -i $SSH_PRIVATE_KEY ec2-user@${EC2_prod_IP} 'pwd'
                        ssh -i $SSH_PRIVATE_KEY ec2-user@${EC2_prod_IP} 'sudo yum install docker -y'
                        ssh -i $SSH_PRIVATE_KEY ec2-user@${EC2_prod_IP} 'sudo usermod -a -G docker ec2-user'
                        ssh -i $SSH_PRIVATE_KEY ec2-user@${EC2_prod_IP} 'newgrp docker'
                        ssh -i $SSH_PRIVATE_KEY ec2-user@${EC2_prod_IP} 'sudo yum install python3-pip -y'
                        ssh -i $SSH_PRIVATE_KEY ec2-user@${EC2_prod_IP} 'pip3 install docker-compose'
                        ssh -i $SSH_PRIVATE_KEY ec2-user@${EC2_prod_IP} 'sudo systemctl start docker.service'
                        ssh -i $SSH_PRIVATE_KEY ec2-user@${EC2_prod_IP} 'sudo systemctl enable docker.service'      
                        ssh -i $SSH_PRIVATE_KEY ec2-user@${EC2_prod_IP} 'sudo yum install git -y'
                        '''
                    }
                }
            }
        }
        stage('Running Docker') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'ssh-testing', keyFileVariable: 'SSH_PRIVATE_KEY')]) {
                    sshagent(['ssh-testing']) {
                        '''
                        ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ec2-user@${EC2_prod_IP} '
                          pwd
                          docker-compose down
                          docker image prune -a
                          docker container prune -f
                          docker rmi -f liorfizz/alpaca
                          rm -rf ~/ci-cd/ || true
                          docker pull liorfizz/alpaca
                          git clone https://github.com/liorfizz/ci-cd.git
                          cd ci-cd/alpacaflask/ && cp docker-compose.yml ~
                          docker-compose up -d
                          '
                        '''
                    }
                }
            }
        }
    }
}