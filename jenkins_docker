pipeline {
    agent any

    environment {
        EC2_test_IP = "35.158.140.36"
        EC2_prod_IP = "52.58.116.118"
        DOCKER_IMAGE_VERSION = ""
    }

    stages {
        stage('Clean and Clone git') {
            steps {
                sh 'rm -rf ci-cd'
                sh 'git clone https://github.com/liorfizz/ci-cd.git'
            }
        }

    stages {
        stage('Retrieve Docker Image Version') {
            steps {
                script {
                    DOCKER_IMAGE_VERSION = sh(
                        script: 'cd ci-cd/alpacaflask/ && git describe --abbrev=0 --tags',
                        returnStdout: true
                    ).trim()
                }
            }
        }

        stage('Build and Cleanup Container') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh "docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}"
                    sh 'docker image prune -a'
                    sh 'docker container prune -f'
                    sh 'docker rmi -f $(docker images -q) || true'
                    sh 'pwd'
                    sh 'cd ci-cd/alpacaflask/ && docker-compose build --build-arg DOCKER_IMAGE_VERSION=${env.DOCKER_IMAGE_VERSION}'
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh "docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}"
                    sh 'docker push liorfizz/alpaca'
                }
            }
        }

        stage('Install Docker') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'ssh-testing', keyFileVariable: 'SSH_PRIVATE_KEY')]) {
                    sshagent(['ssh-testing']) {
                        sh '''
                        ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ec2-user@${EC2_test_IP} '
                            sudo yum install docker -y
                            sudo usermod -a -G docker ec2-user
                            newgrp docker
                            sudo yum install python3-pip -y
                            pip3 install docker-compose
                            sudo systemctl start docker.service
                            sudo systemctl enable docker.service
                            sudo yum install git -y
                        '
                        ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ec2-user@${EC2_prod_IP} '
                            sudo yum install docker -y
                            sudo usermod -a -G docker ec2-user
                            newgrp docker
                            sudo yum install python3-pip -y
                            pip3 install docker-compose
                            sudo systemctl start docker.service
                            sudo systemctl enable docker.service
                            sudo yum install git -y
                        '
                        '''
                    }
                }
            }
        }  

        stage('Deploy Testing') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'ssh-testing', keyFileVariable: 'SSH_PRIVATE_KEY')]) {
                    sshagent(['ssh-testing']) {
                        sh '''
                        ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ec2-user@${EC2_test_IP} '
                            docker kill $(docker ps -q) || true
                            docker image prune -a
                            docker container prune -f
                            docker rmi -f liorfizz/alpaca
                            rm -rf ~/ci-cd/ || true
                            docker pull liorfizz/alpaca
                            git clone https://github.com/liorfizz/ci-cd.git
                            cp ci-cd/alpacaflask/docker-compose.yml ~
                            docker-compose up -d
                        ' 
                        '''
                    }
                }
            }
        }

        stage('Testing Q/A') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'ssh-testing', keyFileVariable: 'SSH_PRIVATE_KEY')]) {
                    sshagent(['ssh-testing']) {
                        sh '''
                        curl_output=$(curl -s -o /dev/null -w "%{http_code}" http://${EC2_test_IP}:5000)
                        if [ "$curl_output" -eq "200" ]; then
                            echo "Site is working (200 OK)"
                        else
                            echo "Error: Site is not working"
                            exit 1
                        fi 
                        '''
                    }
                }
            }
        }

        stage('Deploy Production') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'ssh-testing', keyFileVariable: 'SSH_PRIVATE_KEY')]) {
                    sshagent(['ssh-testing']) {
                        sh '''
                        ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ec2-user@${EC2_prod_IP} '
                            docker kill $(docker ps -q) || true
                            docker image prune -a
                            docker container prune -f
                            docker rmi -f liorfizz/alpaca
                            rm -rf ~/ci-cd/ || true
                            docker pull liorfizz/alpaca
                            git clone https://github.com/liorfizz/ci-cd.git
                            cp ci-cd/alpacaflask/docker-compose.yml ~
                            docker-compose up -d
                        '
                        '''
                    }
                }
            }
        }
    }
}
